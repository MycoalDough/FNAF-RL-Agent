import numpy as np
from collections import deque
import random

class ReplayBuffer:
    def __init__ (self, max, alpha = 0.6, beta = 0.4):
        self.buffer = deque(maxlen=max)
        self.priorities = deque(maxlen=max)
        self.alpha = alpha
        self.beta = beta
        
    def add(self, experience):
        self.buffer.append(experience)
        print(self.priorities)
        self.priorities.append(max(self.priorities, default=1.0))
        

    def set_priorities(self, indices, errors, offset = 0.1):
        for i,e in zip(indices, errors):
            self.priorities[i] = abs(e) + offset
    
    def get_probabilities(self, priority_scale):
        scaled_priorities = np.array(self.priorities) ** priority_scale
        sample_probabilities = scaled_priorities / sum(scaled_priorities)
        return sample_probabilities
    
    def get_importance(self, probabilities):
        importance = 1/len(self.buffer) * 1/probabilities
        importance_normalized = importance / max(importance)
        return importance_normalized
    
    def sample(self, batch_size, priority_scale=1.0):
        sample_size = min(len(self.buffer), batch_size)
        sample_probs = self.get_probabilities(priority_scale)
        sample_indices = random.choices(range(len(self.buffer)), k=sample_size, weights=sample_probs)
        samples = np.array(self.buffer)[sample_indices]
        importance = self.get_importance(sample_probs[sample_indices])
        return samples.tolist(), importance, sample_indices
